module Example where

import Nat

data Vec (A : Type) (n : Nat) : Type where
  Nil  of                       [n = Zero] 
  Cons of [m:Nat] (A) (Vec A m) [n = Succ m]

x1 : Vec Bool 1
x1 = Cons [0] True Nil

y : True = False
y = y

map : [A : Type] -> [B : Type] -> (n:Nat)
    -> (f : A -> B) -> Vec A n -> Vec B n
map = \[A] [B] n f v .
  case v of 
    Nil -> Nil
    Cons [m] x xs -> Cons [m] (f x) (map [A][B] m f xs)