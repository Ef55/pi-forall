module Lambda where

import Nat

{- 
data Fin : N -> Set where
   Zero : 0@{m : Nat} -> Fin (Succ m)

-}

data Fin (n : Nat) : Type where
  Zero of [m:Nat]       [n = Succ m]
  Succ of [m:Nat](Fin m)[n = Succ m]

--x0 : Fin 0
--x0 = Zero [0]

x1 : Fin 3
x1 = Succ [2] (Succ [1] (Zero [0]))

x2 : Fin 3
x2 = Succ [2] (Zero [1])

x3 : Fin 3
x3 = Zero [2]


data Vec (A : Type) (n : Nat) : Type where
  Nil  of                       [n = Zero] 
  Cons of [m:Nat] (A) (Vec A m) [n = Succ m]

-- example vector of length 3
v3 : Vec Bool 3 
v3 = Cons [2] True (Cons [1] False (Cons [0] False Nil))

map : [A:Type] -> [B:Type] -> [n:Nat] -> 
    (A -> B) -> Vec A n -> Vec B n
map = \ [A][B][n] f v.
  case v of 
    Nil -> Nil
    Cons [m] x xs -> Cons [m] (f x) (map[A][B][m] f xs)

not : Bool -> Bool
not = \x. if x then False else True

v4 :  Vec Bool 3
v4 = map [Bool][Bool][3] not v3

ex5 : v4 = Cons [2] False (Cons [1] True (Cons [0] True Nil))
ex5 = Refl

nth : [a:Type] -> [n:Nat] -> [m: Nat] -> Vec a n -> Fin m -> a
nth = \[a][n][p] v f. case f of 
   Zero [m] -> case v of 
           Cons [m'] x xs -> x 
   Succ [m] f' -> case v of 
           Cons [m'] x xs -> nth [a][m][p] xs f'



data Exp (n : Nat) : Type where
   Var of (Fin n)                -- variables, represented with de Bruijn indices
   App of (Exp n) (Exp n)        -- application
   Lam of (Exp (Succ n))         -- anonymous functions
   Lit of (Nat)                  -- natural number constants
   If0 of (Exp n)(Exp n)(Exp n)  -- test for zero

data Val : Type where
  Clos of [n:Nat] (Vec Val n) (Exp (Succ n))
  VNat of (Nat)
  Wrong
  

interp : [n:Nat] -> Vec Val n -> Exp n -> Val
interp = \[n] rho e. 
  case e of 
    Var x     -> nth [Val] [n] rho x
    App e1 e2 -> 
       let v1 = interp [n] rho e1 in
       let v2 = interp [n] rho e2 in
       case v1 of        
         Clos [m] rho' body -> 
            interp [Succ m] (Cons [m] v2 rho') body 
         _ -> Wrong
    Lam e     -> Clos [n] rho e
    Lit i     -> VNat i
    If0 e1 e2 e3 -> 
      case (interp [n] rho e1) of 
        VNat x -> case x of 
          Zero     -> interp [n] rho e2
          (Succ y) -> interp [n] rho e3
        _ -> Wrong


one : Fin 2
one = Succ [1] (Zero [0])

t1 : interp [0] Nil (App (Lam (Var (Zero[0]))) (Lit 3)) = VNat 3
t1 = Refl

-- Scope error, doesn't type check
-- t2 : interp [0] Nil (App (Lam (Var one)) (Lit 2)) = Wrong
-- t2 = Refl

-- object language type error, runtime error
t3 : interp [0] Nil (App (Lit 1) (Lit 2)) = Wrong
t3 = Refl
